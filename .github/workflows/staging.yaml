name: Staging - Deploy to Google App Engine
on:
  push:
    branches:
      - staging
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Fetch repo
        uses: actions/checkout@master
      - name: Install dependencies
        run: npm i
      - name: Create Env
        run: |
          touch .env
          echo VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY_STAGING }} >> .env
          echo VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN_STAGING }} >> .env
          echo VITE_FIREBASE_DATABASE_URL=${{ secrets.VITE_FIREBASE_DATABASE_URL_STAGING }} >> .env
          echo VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID_STAGING }} >> .env
          echo VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET_STAGING }} >> .env
          echo VITE_FIREBASE_MESSAGE_SENDER_ID=1:${{ secrets.VITE_FIREBASE_MESSAGE_SENDER_ID_STAGING }} >> .env
          echo VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID_STAGING }} >> .env
          echo VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID_STAGING }} >> .env
          echo VITE_GOOGLE_MAP=${{ secrets.VITE_GOOGLE_MAP_STAGING }} >> .env
          echo VITE_GOOGLE_TAG_MANAGER=${{ secrets.VITE_GOOGLE_TAG_MANAGER_STAGING }} >> .env
          echo VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL_STAGING }} >> .env
          cat .env
      - name: Build
        run: npm run build
      - name: Upload Dist Folder
        uses: actions/upload-artifact@v3
        with:
          name: Dist
          path: dist/
  deploy:
    name: GAE Deploy
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v2
      - name: Download Dist Artifact
        uses: actions/download-artifact@v3
        with:
          name: Dist
          path: dist/
      - uses: 'google-github-actions/auth@v1'
        name: 'Authenticate to Google Cloud'
        with:
          credentials_json: ${{ secrets.gcp_credentials }}
      - uses: google-github-actions/deploy-appengine@main
        name: 'Deploy to App Engine'
        with:
          credentials: ${{ secrets.gcp_credentials }}
          deliverables: 'dev.yaml'
  cleanup:
    name: Artifact Cleanup
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: call webhook to delete artifacts
      env:
        FOR_WEBHOOKS_SECRET: ${{ secrets.FOR_WEBHOOKS_SECRET }}
      run: |
        echo "::add-mask::$FOR_WEBHOOKS_SECRET"
        curl --verbose --fail --show-error --location --request POST "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" --header "Authorization: token $FOR_WEBHOOKS_SECRET" --header 'Content-Type: application/json' --header 'Accept: application/vnd.github.everest-preview+json' --data-raw "{ \"event_type\": \"delete_all_artifacts\", \"client_payload\": {\"parent_runid\": \"$GITHUB_RUN_ID\", \"parent_repo\": \"$GITHUB_REPOSITORY\"} }"
 